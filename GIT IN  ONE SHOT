Sure! I'll break down the most common Git operations, with examples and explanations for each. These commands are essential when working with Git for version control, both individually and collaboratively.

### 1. **`git init`**: Initialize a Git Repository
This command initializes a new Git repository in your current folder.

```bash
git init
```

### 2. **`git clone`**: Clone a Repository
Cloning is used to create a local copy of a remote Git repository.

```bash
git clone https://github.com/username/repo.git
```

### 3. **`git add`**: Stage Changes
`git add` adds files to the staging area, preparing them for a commit.

- To add a single file:
  ```bash
  git add file.txt
  ```
- To add all files:
  ```bash
  git add .
  ```

### 4. **`git commit`**: Commit Changes
`git commit` saves your staged changes to the local repository.

- Commit with a message:
  ```bash
  git commit -m "Added feature X"
  ```

### 5. **`git status`**: Check the Status
This command shows the current state of the working directory and the staging area.

```bash
git status
```

### 6. **`git log`**: View Commit History
`git log` shows the commit history.

- To view the log:
  ```bash
  git log
  ```

- To see a one-line summary of commits:
  ```bash
  git log --oneline
  ```

### 7. **`git branch`**: Working with Branches
Branches allow you to work on different versions of your code.

- List branches:
  ```bash
  git branch
  ```

- Create a new branch:
  ```bash
  git branch new-feature
  ```

- Switch to a branch:
  ```bash
  git checkout new-feature
  ```

- Create and switch to a branch in one command:
  ```bash
  git checkout -b new-feature
  ```

- Delete a branch:
  ```bash
  git branch -d new-feature
  ```

### 8. **`git merge`**: Merge Branches
Merging combines the changes from one branch into another.

- Merge the `new-feature` branch into `main`:
  ```bash
  git checkout main
  git merge new-feature
  ```

### 9. **`git pull`**: Pull Updates from Remote
Pulling fetches changes from the remote repository and merges them into your local branch.

- Pull updates:
  ```bash
  git pull origin main
  ```

### 10. **`git push`**: Push Changes to Remote
`git push` sends your committed changes to the remote repository.

- Push to the remote:
  ```bash
  git push origin main
  ```

### 11. **`git remote add`**: Add a Remote Repository
If your local repository isn’t linked to a remote, you can add one.

- Add a remote:
  ```bash
  git remote add origin https://github.com/username/repo.git
  ```

- To list all remotes:
  ```bash
  git remote -v
  ```

### 12. **`git fork`**: Fork a Repository
Forking is not a Git command but an action done via GitHub (or similar services) to create a copy of someone else's repository under your own GitHub account.

### 13. **`git fetch`**: Fetch Remote Changes
Fetching downloads new data from the remote repository but doesn’t merge it with your current branch.

```bash
git fetch origin
```

### 14. **`git rm --cached <file>`**: Remove Files from Staging Area
This command removes a file from the staging area but keeps it in your working directory.

```bash
git rm --cached file.txt
```

### 15. **`.gitignore`**: Ignoring Files
To prevent Git from tracking certain files, you can add them to a `.gitignore` file.

Example `.gitignore`:
```
*.log
node_modules/
```

### 16. **`git stash`**: Save Uncommitted Changes Temporarily
If you’re in the middle of something and want to switch branches or pull updates without committing your work, you can stash it.

- Stash changes:
  ```bash
  git stash
  ```

- Apply the latest stash:
  ```bash
  git stash apply
  ```

- List all stashes:
  ```bash
  git stash list
  ```

### 17. **`git reset`**: Undo Changes
`git reset` lets you undo changes to your working directory or staging area.

- Unstage a file:
  ```bash
  git reset file.txt
  ```

- Reset to a previous commit:
  ```bash
  git reset --hard <commit_hash>
  ```

### 18. **`git rebase`**: Rebase Branches
Rebasing moves or combines a sequence of commits to a new base commit.

```bash
git rebase main
```

### 19. **`git revert`**: Revert a Commit
This command undoes a commit by creating a new commit that inverses the changes.

```bash
git revert <commit_hash>
```

### 20. **`git cherry-pick`**: Apply a Commit to Another Branch
This command lets you apply specific commits from one branch into another.

```bash
git cherry-pick <commit_hash>
```

---

### Example Workflow

1. **Clone a repository:**
   ```bash
   git clone https://github.com/username/repo.git
   ```

2. **Create a new branch:**
   ```bash
   git checkout -b new-feature
   ```

3. **Make changes and stage them:**
   ```bash
   git add .
   ```

4. **Commit the changes:**
   ```bash
   git commit -m "Added new feature"
   ```

5. **Push the changes to the remote:**
   ```bash
   git push origin new-feature
   ```

6. **Open a pull request (PR) on GitHub** (if collaborating).

7. **Merge the changes:**
   ```bash
   git checkout main
   git merge new-feature
   ```

8. **Delete the feature branch:**
   ```bash
   git branch -d new-feature
   ```

---

### Summary Table of Commands:

| Command                   | Description                                 |
|----------------------------|---------------------------------------------|
| `git init`                 | Initialize a new repository                 |
| `git clone`                | Clone a repository                          |
| `git add`                  | Stage files                                |
| `git commit`               | Commit changes                             |
| `git status`               | Check the status of your working directory  |
| `git log`                  | View commit history                        |
| `git branch`               | List, create, delete branches               |
| `git checkout`             | Switch branches                             |
| `git merge`                | Merge branches                              |
| `git pull`                 | Fetch and merge changes from remote         |
| `git push`                 | Push changes to remote                      |
| `git remote add`           | Add a new remote repository                 |
| `git fetch`                | Fetch changes from remote without merging   |
| `git rm --cached`          | Remove files from staging area              |
| `git stash`                | Stash changes temporarily                   |
| `git reset`                | Undo changes or reset to a previous commit  |
| `git rebase`               | Reapply commits on top of another base      |
| `git revert`               | Revert a commit by creating a new one       |
| `git cherry-pick`          | Apply specific commits from another branch  |

Let me know if you need more specific examples or deeper explanations on any Git topic!